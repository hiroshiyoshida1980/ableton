import { EventType, Handler, EventHandlerMap } from 'mitt';
export type Arguments<T> = [T] extends [(...args: infer U) => any] ? U : [T] extends [void] ? [] : [T];
export interface TypedEventEmitter<Events> {
    on<E extends keyof Events>(event: E, listener: Events[E]): void;
    off<E extends keyof Events>(event: E, listener: Events[E]): void;
    emit<E extends keyof Events>(event: E, ...args: Arguments<Events[E]>): void;
}
export declare class EventEmitter<Events extends Record<EventType, unknown>> {
    private mitt;
    constructor(e?: EventHandlerMap<Events>);
    get all(): EventHandlerMap<Events>;
    on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;
    off<Key extends keyof Events>(type: Key, handler?: Handler<Events[Key]>): void;
    emit<T>(type: EventType, event?: T): void;
}
