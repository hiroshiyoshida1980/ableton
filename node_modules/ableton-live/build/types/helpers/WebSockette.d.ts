import { TypedEventEmitter } from './EventEmitter';
declare enum WebSocketCloseCode {
    NormalClosure = 1000,
    GoingAway = 1001,
    NoStatusReceived = 1005,
    AbnormalClosure = 1006
}
export declare enum WebSocketState {
    Connecting = 0,
    Open = 1,
    Closing = 2,
    Closed = 3
}
export interface WebSocketteOptions {
    timeout?: number;
    maxAttempts?: number;
}
export type WebSocketPayload = string | ArrayBuffer | SharedArrayBuffer | Blob | ArrayBufferView;
interface WebSocketEvents {
    open: (event: Event) => void;
    message: (event: MessageEvent) => void;
    close: (event: CloseEvent) => void;
    error: (event: Event) => void;
    reconnect: (tries: number) => void;
    ping: () => void;
    pong: () => void;
}
declare const WebSockette_base: new () => TypedEventEmitter<WebSocketEvents>;
export declare class WebSockette extends WebSockette_base {
    ws: WebSocket;
    num: number;
    timer: number | undefined;
    timeout: number;
    maxAttempts: number;
    private url;
    private protocols;
    constructor({ maxAttempts, timeout }?: WebSocketteOptions);
    open(url: string, protocols?: string | string[]): void;
    get state(): WebSocketState;
    private reconnect;
    json<T>(payload: T): void;
    send(payload: WebSocketPayload): void;
    close(code?: WebSocketCloseCode, reason?: string): void;
}
export {};
