import { Properties } from './Properties';
import { AbletonLive } from './index';
import { Track, RawTrack } from './Track';
import { RawScene, Scene } from './Scene';
import { Clip, RawClip } from './Clip';
import { ClipSlot, RawClipSlot } from './ClipSlot';
import { DeviceParameter, RawDeviceParameter } from './DeviceParameter';
/**
 * @interface SongViewGetProperties
 */
export interface SongViewGetProperties {
    /**
     * Reflects the state of the envelope/automation Draw Mode Switch in the transport bar, as toggled with Cmd/Ctrl-B.<br/>
     * 0 = breakpoint editing (shows arrow), 1 = drawing (shows pencil)
     */
    draw_mode: boolean;
    /**
     * Reflects the state of the Follow switch in the transport bar as toggled with Cmd/Ctrl-F.<br/>
     * 0 = don't follow playback position, 1 = follow playback position
     */
    follow_song: boolean;
}
/**
 * @interface SongViewChildrenProperties
 */
export interface SongViewChildrenProperties {
    /**
     * The clip currently displayed in the Live application's Detail View.
     */
    detail_clip: RawClip[];
    /**
     * The slot highlighted in the Session View.
     */
    highlighted_clip_slot: RawClipSlot[];
    /**
     * The selected parameter, or "id 0"
     */
    selected_parameter: RawDeviceParameter[];
    selected_scene: RawScene[];
    selected_track: RawTrack[];
}
/**
 * @interface SongViewTransformedProperties
 */
export interface SongViewTransformedProperties {
    /**
     * @inheritdoc SongViewChildrenProperties.detail_clip
     */
    detail_clip: Clip;
    /**
     * @inheritdoc SongViewChildrenProperties.highlighted_clip_slot
     */
    highlighted_clip_slot: ClipSlot;
    /**
     * @inheritdoc SongViewChildrenProperties.selected_parameter
     */
    selected_parameter: DeviceParameter;
    selected_scene: Scene;
    selected_track: Track;
}
/**
 * @interface SongViewSetProperties
 */
export interface SongViewSetProperties {
    /**
     * @inheritdoc SongViewChildrenProperties.draw_mode
     */
    draw_mode: boolean;
    /**
     * @inheritdoc SongViewChildrenProperties.follow_song
     */
    follow_song: boolean;
    detail_clip: string;
    highlighted_clip_slot: string;
    selected_parameter: string;
    selected_scene: string;
    selected_track: string;
}
/**
 * @interface SongViewObservableProperties
 */
export interface SongViewObservableProperties {
    /**
     * @inheritdoc SongViewChildrenProperties.detail_clip
     */
    detail_clip: Clip;
    /**
     * @inheritdoc SongViewChildrenProperties.highlighted_clip_slot
     */
    highlighted_clip_slot: ClipSlot;
    /**
     * @inheritdoc SongViewChildrenProperties.selected_parameter
     */
    selected_parameter: DeviceParameter;
    selected_scene: Scene;
    selected_track: Track;
    /**
     * @inheritdoc SongViewChildrenProperties.draw_mode
     */
    draw_mode: boolean;
    /**
     * @inheritdoc SongViewChildrenProperties.follow_song
     */
    follow_song: boolean;
}
/**
 * This class represents the view aspects of a Live document: the Session and Arrangement Views.
 *
 * @class SongView
 * @extends {Properties<SongViewGetProperties, SongViewChildrenProperties, SongViewTransformedProperties, SongViewSetProperties, SongViewObservableProperties>}
 */
export declare class SongView extends Properties<SongViewGetProperties, SongViewChildrenProperties, SongViewTransformedProperties, SongViewSetProperties, SongViewObservableProperties> {
    static path: string;
    /**
     * Creates an instance of SongView.
     * @param {AbletonLive} ableton
     * @memberof SongView
     */
    constructor(ableton: AbletonLive);
    selectTrack(track: Track): Promise<null>;
    selectScene(scene: Scene): Promise<null>;
    selectClip(clip: Clip): Promise<null>;
    selectParameter(dp: DeviceParameter): Promise<null>;
    selectClipSlot(clipSlot: ClipSlot): Promise<null>;
    /**
     * Selects the given device object in its track.
     * You may obtain the id using a live.path or by using get devices on a track, for example.
     * The track containing the device will not be shown automatically, and the device gets the appointed device (blue hand) only if its track is selected.
     * @memberof SongView
     *
     * @param {number} id
     * @return {Promise<void>}
     */
    selectDevice(id: number): Promise<void>;
}
