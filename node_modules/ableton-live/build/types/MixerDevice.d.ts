import { DeviceParameter, RawDeviceParameter } from './DeviceParameter';
import { Properties } from './Properties';
import { AbletonLive } from '.';
/**
 *  [not in master track]
 */
export declare const enum CrossfadeAssign {
    A = 0,
    none = 1,
    B = 2
}
export declare const enum PanningMode {
    Stereo = 0,
    SplitStereo = 1
}
export interface MixerDeviceGetProperties {
    crossfade_assign: CrossfadeAssign;
    /**
     * Access to the Track mixer's pan mode
     */
    panning_mode: PanningMode;
}
export interface MixerDeviceChildrenProperties {
    /**
     * One send per return track.
     */
    sends: RawDeviceParameter[];
    /**
     * [in master track only]
     */
    cue_volume: RawDeviceParameter[];
    /**
     * [in master track only]
     */
    crossfader: RawDeviceParameter[];
    /**
     * The Track's Left Split Stereo Pan Parameter.
     */
    left_split_stereo: RawDeviceParameter[];
    /**
     * The Track's Left Split Stereo Pan Parameter.
     */
    right_split_stereo: RawDeviceParameter[];
    panning: RawDeviceParameter[];
    /**
     * [in master track only]
     */
    song_tempo: RawDeviceParameter[];
    volume: RawDeviceParameter[];
    track_activator: RawDeviceParameter[];
}
export interface MixerDeviceTransformedProperties {
    sends: DeviceParameter;
    cue_volume: DeviceParameter;
    crossfader: DeviceParameter;
    left_split_stereo: DeviceParameter;
    right_split_stereo: DeviceParameter;
    panning: DeviceParameter;
    song_tempo: DeviceParameter;
    volume: DeviceParameter;
    track_activator: DeviceParameter;
}
export interface MixerDeviceSetProperties {
    crossfade_assign: CrossfadeAssign;
    /**
     * @inheritdoc MixerDeviceGetProperties.panning_mode
     */
    panning_mode: PanningMode;
}
export interface MixerDeviceObservableProperties {
    crossfade_assign: CrossfadeAssign;
    /**
     * @inheritdoc MixerDeviceGetProperties.panning_mode
     */
    panning_mode: PanningMode;
}
export interface RawMixerDevice {
    id: number;
    volume: RawDeviceParameter;
    panning: RawDeviceParameter;
}
export declare const RawMixerDeviceKeys: {
    name: string;
    initialProps: string[];
}[];
/**
 * This class represents a mixer device in Live.
 * It provides access to volume, panning and other DeviceParameter objects.
 * See [[DeviceParameter]] to learn how to modify them.
 *
 * @class MixerDevice
 * @extends {Properties<MixerDeviceGetProperties, MixerDeviceChildrenProperties, MixerDeviceTransformedProperties, MixerDeviceSetProperties, MixerDeviceObservableProperties>}
 */
export declare class MixerDevice extends Properties<MixerDeviceGetProperties, MixerDeviceChildrenProperties, MixerDeviceTransformedProperties, MixerDeviceSetProperties, MixerDeviceObservableProperties> {
    raw: RawMixerDevice;
    static path: string;
    private _volume;
    private _panning;
    constructor(ableton: AbletonLive, raw: RawMixerDevice, path?: string);
    get volume(): DeviceParameter;
    get panning(): DeviceParameter;
}
