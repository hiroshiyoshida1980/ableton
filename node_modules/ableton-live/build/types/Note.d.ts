/**
 * Note Parameters
 * @typedef {object} NoteParameters
 * @memberof Note
 *
 * @property {boolean} muted 1 = the note is deactivated.
 * @property {number} probability the chance that the note will be played
 * @property {number} velocityDeviation the range of velocity values at which the note can be played, -127..127
 * @property {number} releaseVelocity the note release velocity (64 by default).
 * @property {number} id the note id from Live
 */
export type NoteParameters = {
    muted: boolean;
    probability: number;
    velocityDeviation: number;
    releaseVelocity: number;
    id: number | undefined;
};
/**
 * Note
 * @class
 */
export declare class Note {
    private _id?;
    private _pitch;
    private _start;
    private _duration;
    private _velocity;
    private _muted;
    private _probability;
    private _velocityDeviation;
    private _releaseVelocity;
    /**
     * @private
     * @static
     * @memberof Note
     */
    static MinDuration: number;
    /**
     *Creates an instance of Note.
     * @param {number} pitch is the MIDI note number, 0...127, 60 is C3.
     * @param {number} start is the note start time in beats of absolute clip time.
     * @param {number} duration is the note length in beats.
     * @param {number} velocity is the note velocity, 1 ... 127.
     * @param {NoteParameters} parameters extra note parameters
     * @memberof Note
     */
    constructor(pitch: number, start: number, duration: number, velocity: number, parameters?: Partial<NoteParameters>);
    /**
     * The note id from Live
     *
     * @readonly
     * @type {(number | undefined)}
     * @memberof Note
     */
    get id(): number | undefined;
    /**
     * The MIDI note number, 0...128, 60 is C3.
     *
     * @readonly
     * @type {number}
     * @memberof Note
     */
    get pitch(): number;
    /**
     * The note start time in beats of absolute clip time.
     *
     * @readonly
     * @type {number}
     * @memberof Note
     */
    get start(): number;
    /**
     * The note length in beats.
     *
     * @readonly
     * @type {number}
     * @memberof Note
     */
    get duration(): number;
    /**
     * The note velocity, 1 ... 127.
     *
     * @readonly
     * @type {number}
     * @memberof Note
     */
    get velocity(): number;
    get muted(): boolean;
    get probability(): number;
    get velocityDeviation(): number;
    get releaseVelocity(): number;
    /**
     * The Note serialized for consumption in Live
     *
     * @readonly
     * @type {SerializedNote}
     * @memberof Note
     */
    get serialize(): SerializedNote;
    /**
     * Clones this Note
     *
     * @function clone
     * @memberof Note
     * @returns {Note}
     */
    clone(): Note;
    /**
     * @private
     * @readonly
     * @type {string}
     * @memberof Note
     */
    get [Symbol.toStringTag](): string;
}
export type SerializedNote = {
    pitch: number;
    start_time: number;
    duration: number;
    velocity: number;
    mute: number;
    probability: number;
    velocity_deviation: number;
    release_velocity: number;
    note_id?: number;
};
