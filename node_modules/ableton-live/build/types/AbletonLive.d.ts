import { TypedEventEmitter } from './helpers/EventEmitter';
import { Song } from './Song';
import { SongView } from './SongView';
interface ConnectionEvents {
    connect: () => void;
    disconnect: () => void;
}
export interface AbletonLiveOptions {
    /**
     * @default '127.0.0.1'
     */
    host?: string;
    /**
     * @default 9001
     */
    port?: number;
    /**
     * Logs every request to and from Live to the console
     *
     * @default false
     */
    logRequests?: boolean;
}
declare const AbletonLive_base: new () => TypedEventEmitter<ConnectionEvents>;
/**
 * The library's entry point.
 *
 * @class AbletonLive
 * @extends {EventEmitter}
 */
export declare class AbletonLive extends AbletonLive_base {
    private client;
    private messageBus;
    private eventListeners;
    private _isConnected;
    private _host;
    private _port;
    private _logRequests;
    song: Song;
    songView: SongView;
    private _isBrowser;
    /**
     * @param {AbletonLiveOptions} [{ host = '127.0.0.1', port = 9000, logRequests = false }={}]
     * @memberof AbletonLive
     */
    constructor({ host, port, logRequests }?: AbletonLiveOptions);
    /**
     * Connect to the Max4Live server
     *
     * @returns {Promise<void>}
     * @memberof AbletonLive
     */
    connect(): Promise<void>;
    /**
     * Returns true if there's a connection with the server
     *
     * @readonly
     * @type {boolean}
     * @memberof AbletonLive
     */
    get isConnected(): boolean;
    private closeClient;
    close(): void;
    disconnect(): void;
    protected sendRaw<T>(msg: T): void;
    private handleIncoming;
    private sendCommand;
    get(path: string, prop: string, liveObjectId?: number): Promise<any>;
    getChildren(path: string, args: {
        child: string;
        initialProps: any;
        index?: number;
    }, liveObjectId?: number): Promise<any>;
    set(path: string, prop: string, value: any, liveObjectId?: number): Promise<any>;
    observe(path: string, property: string, listener: (data: any) => any, { initialProps, liveObjectId }?: {
        initialProps?: any;
        liveObjectId?: number;
    }): Promise<any>;
    call(path: string, callDescription: {
        method: string;
        parameters: any;
    }, liveObjectId?: number, timeout?: number): Promise<any>;
    callMultiple(path: string, calls: any[][], liveObjectId?: number, timeout?: number): Promise<any>;
    private removeObserser;
}
export {};
